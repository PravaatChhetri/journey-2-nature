---
interface Props {
  dates: {
    startDate: string;
    endDate: string;
    price: string;
    availability: "available" | "limited" | "full";
  }[];
}

const { dates } = Astro.props;
---

<div class="overflow-x-auto">
  <table class="min-w-full divide-y divide-gray-200">
    <thead class="bg-gray-50">
      <tr>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Start Date</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">End Date</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
      </tr>
    </thead>
    <tbody class="bg-white divide-y divide-gray-200">
      {dates.map(date => (
        <tr>
          <td class="px-6 py-4 whitespace-nowrap">{date.startDate}</td>
          <td class="px-6 py-4 whitespace-nowrap">{date.endDate}</td>
          <td class="px-6 py-4 whitespace-nowrap font-semibold">{date.price}</td>
          <td class="px-6 py-4 whitespace-nowrap">
            <span class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full
              ${date.availability === 'available' ? 'bg-green-100 text-green-800' :
                date.availability === 'limited' ? 'bg-yellow-100 text-yellow-800' :
                'bg-red-100 text-red-800'}`}>
              {date.availability.charAt(0).toUpperCase() + date.availability.slice(1)}
            </span>
          </td>
        </tr>
      ))}
    </tbody>
  </table>
</div>